/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateOrderDto', 'model/OrderResource', 'model/UserOrderSearchResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateOrderDto'), require('../model/OrderResource'), require('../model/UserOrderSearchResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiDocumentation) {
      root.ApiDocumentation = {};
    }
    root.ApiDocumentation.OrderRestServiceApi = factory(root.ApiDocumentation.ApiClient, root.ApiDocumentation.CreateOrderDto, root.ApiDocumentation.OrderResource, root.ApiDocumentation.UserOrderSearchResponse);
  }
}(this, function(ApiClient, CreateOrderDto, OrderResource, UserOrderSearchResponse) {
  'use strict';

  /**
   * OrderRestService service.
   * @module api/OrderRestServiceApi
   * @version 1.0
   */

  /**
   * Constructs a new OrderRestServiceApi. 
   * @alias module:api/OrderRestServiceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the abortOrderDeliveryUsingPATCH operation.
     * @callback module:api/OrderRestServiceApi~abortOrderDeliveryUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * abortOrderDelivery
     * @param {String} orderId orderId
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.authenticated 
     * @param {String} opts.authorities0Authority 
     * @param {Object.<String, {String: String}>} opts.credentials 
     * @param {Object.<String, {String: String}>} opts.details 
     * @param {Object.<String, {String: String}>} opts.principal 
     * @param {module:api/OrderRestServiceApi~abortOrderDeliveryUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderResource}
     */
    this.abortOrderDeliveryUsingPATCH = function(orderId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling abortOrderDeliveryUsingPATCH");
      }


      var pathParams = {
        'orderId': orderId
      };
      var queryParams = {
        'authenticated': opts['authenticated'],
        'authorities[0].authority': opts['authorities0Authority'],
        'credentials': opts['credentials'],
        'details': opts['details'],
        'principal': opts['principal'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderResource;

      return this.apiClient.callApi(
        '/v1/order/{orderId}/abort', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the acceptOrderUsingPATCH operation.
     * @callback module:api/OrderRestServiceApi~acceptOrderUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * acceptOrder
     * @param {String} orderId orderId
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.authenticated 
     * @param {String} opts.authorities0Authority 
     * @param {Object.<String, {String: String}>} opts.credentials 
     * @param {Object.<String, {String: String}>} opts.details 
     * @param {Object.<String, {String: String}>} opts.principal 
     * @param {module:api/OrderRestServiceApi~acceptOrderUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderResource}
     */
    this.acceptOrderUsingPATCH = function(orderId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling acceptOrderUsingPATCH");
      }


      var pathParams = {
        'orderId': orderId
      };
      var queryParams = {
        'authenticated': opts['authenticated'],
        'authorities[0].authority': opts['authorities0Authority'],
        'credentials': opts['credentials'],
        'details': opts['details'],
        'principal': opts['principal'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderResource;

      return this.apiClient.callApi(
        '/v1/order/{orderId}/accept', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelOrderUsingPATCH operation.
     * @callback module:api/OrderRestServiceApi~cancelOrderUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cancelOrder
     * @param {String} orderId orderId
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.authenticated 
     * @param {String} opts.authorities0Authority 
     * @param {Object.<String, {String: String}>} opts.credentials 
     * @param {Object.<String, {String: String}>} opts.details 
     * @param {Object.<String, {String: String}>} opts.principal 
     * @param {module:api/OrderRestServiceApi~cancelOrderUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderResource}
     */
    this.cancelOrderUsingPATCH = function(orderId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling cancelOrderUsingPATCH");
      }


      var pathParams = {
        'orderId': orderId
      };
      var queryParams = {
        'authenticated': opts['authenticated'],
        'authorities[0].authority': opts['authorities0Authority'],
        'credentials': opts['credentials'],
        'details': opts['details'],
        'principal': opts['principal'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderResource;

      return this.apiClient.callApi(
        '/v1/order/{orderId}/cancel', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrderUsingPOST operation.
     * @callback module:api/OrderRestServiceApi~createOrderUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createOrder
     * @param {module:model/CreateOrderDto} order order
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.authenticated 
     * @param {String} opts.authorities0Authority 
     * @param {Object.<String, {String: String}>} opts.credentials 
     * @param {Object.<String, {String: String}>} opts.details 
     * @param {Object.<String, {String: String}>} opts.principal 
     * @param {module:api/OrderRestServiceApi~createOrderUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderResource}
     */
    this.createOrderUsingPOST = function(order, opts, callback) {
      opts = opts || {};
      var postBody = order;

      // verify the required parameter 'order' is set
      if (order === undefined || order === null) {
        throw new Error("Missing the required parameter 'order' when calling createOrderUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'authenticated': opts['authenticated'],
        'authorities[0].authority': opts['authorities0Authority'],
        'credentials': opts['credentials'],
        'details': opts['details'],
        'principal': opts['principal'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderResource;

      return this.apiClient.callApi(
        '/v1/order', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deliverOrderUsingPATCH operation.
     * @callback module:api/OrderRestServiceApi~deliverOrderUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deliverOrder
     * @param {String} orderId orderId
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.authenticated 
     * @param {String} opts.authorities0Authority 
     * @param {Object.<String, {String: String}>} opts.credentials 
     * @param {Object.<String, {String: String}>} opts.details 
     * @param {Object.<String, {String: String}>} opts.principal 
     * @param {module:api/OrderRestServiceApi~deliverOrderUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderResource}
     */
    this.deliverOrderUsingPATCH = function(orderId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling deliverOrderUsingPATCH");
      }


      var pathParams = {
        'orderId': orderId
      };
      var queryParams = {
        'authenticated': opts['authenticated'],
        'authorities[0].authority': opts['authorities0Authority'],
        'credentials': opts['credentials'],
        'details': opts['details'],
        'principal': opts['principal'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderResource;

      return this.apiClient.callApi(
        '/v1/order/{orderId}/deliver', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchOrdersInRangeUsingGET operation.
     * @callback module:api/OrderRestServiceApi~searchOrdersInRangeUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserOrderSearchResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * searchOrdersInRange
     * @param {Number} latitude latitude
     * @param {Number} longitude longitude
     * @param {Number} range range
     * @param {module:api/OrderRestServiceApi~searchOrdersInRangeUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserOrderSearchResponse>}
     */
    this.searchOrdersInRangeUsingGET = function(latitude, longitude, range, callback) {
      var postBody = null;

      // verify the required parameter 'latitude' is set
      if (latitude === undefined || latitude === null) {
        throw new Error("Missing the required parameter 'latitude' when calling searchOrdersInRangeUsingGET");
      }

      // verify the required parameter 'longitude' is set
      if (longitude === undefined || longitude === null) {
        throw new Error("Missing the required parameter 'longitude' when calling searchOrdersInRangeUsingGET");
      }

      // verify the required parameter 'range' is set
      if (range === undefined || range === null) {
        throw new Error("Missing the required parameter 'range' when calling searchOrdersInRangeUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'latitude': latitude,
        'longitude': longitude,
        'range': range,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [UserOrderSearchResponse];

      return this.apiClient.callApi(
        '/v1/order', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
