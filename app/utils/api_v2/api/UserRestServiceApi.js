/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateUserDto', 'model/UpdateUserDto', 'model/UserOrderAcceptedResponse', 'model/UserOrderResponse', 'model/UserResource'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateUserDto'), require('../model/UpdateUserDto'), require('../model/UserOrderAcceptedResponse'), require('../model/UserOrderResponse'), require('../model/UserResource'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiDocumentation) {
      root.ApiDocumentation = {};
    }
    root.ApiDocumentation.UserRestServiceApi = factory(root.ApiDocumentation.ApiClient, root.ApiDocumentation.CreateUserDto, root.ApiDocumentation.UpdateUserDto, root.ApiDocumentation.UserOrderAcceptedResponse, root.ApiDocumentation.UserOrderResponse, root.ApiDocumentation.UserResource);
  }
}(this, function(ApiClient, CreateUserDto, UpdateUserDto, UserOrderAcceptedResponse, UserOrderResponse, UserResource) {
  'use strict';

  /**
   * UserRestService service.
   * @module api/UserRestServiceApi
   * @version 1.0
   */

  /**
   * Constructs a new UserRestServiceApi. 
   * @alias module:api/UserRestServiceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createUserUsingPOST operation.
     * @callback module:api/UserRestServiceApi~createUserUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createUser
     * @param {module:model/CreateUserDto} createUserDto createUserDto
     * @param {module:api/UserRestServiceApi~createUserUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResource}
     */
    this.createUserUsingPOST = function(createUserDto, callback) {
      var postBody = createUserDto;

      // verify the required parameter 'createUserDto' is set
      if (createUserDto === undefined || createUserDto === null) {
        throw new Error("Missing the required parameter 'createUserDto' when calling createUserUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserResource;

      return this.apiClient.callApi(
        '/v1/user', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOwnUserUsingDELETE operation.
     * @callback module:api/UserRestServiceApi~deleteOwnUserUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteOwnUser
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.authenticated 
     * @param {String} opts.authorities0Authority 
     * @param {Object.<String, {String: String}>} opts.credentials 
     * @param {Object.<String, {String: String}>} opts.details 
     * @param {Object.<String, {String: String}>} opts.principal 
     * @param {module:api/UserRestServiceApi~deleteOwnUserUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOwnUserUsingDELETE = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'authenticated': opts['authenticated'],
        'authorities[0].authority': opts['authorities0Authority'],
        'credentials': opts['credentials'],
        'details': opts['details'],
        'principal': opts['principal'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/user', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDriverOrdersUsingGET operation.
     * @callback module:api/UserRestServiceApi~getDriverOrdersUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserOrderAcceptedResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getDriverOrders
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.authenticated 
     * @param {String} opts.authorities0Authority 
     * @param {Object.<String, {String: String}>} opts.credentials 
     * @param {Object.<String, {String: String}>} opts.details 
     * @param {Object.<String, {String: String}>} opts.principal 
     * @param {module:api/UserRestServiceApi~getDriverOrdersUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserOrderAcceptedResponse>}
     */
    this.getDriverOrdersUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'authenticated': opts['authenticated'],
        'authorities[0].authority': opts['authorities0Authority'],
        'credentials': opts['credentials'],
        'details': opts['details'],
        'principal': opts['principal'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [UserOrderAcceptedResponse];

      return this.apiClient.callApi(
        '/v1/user/orders-accepted', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrdersForUserUsingGET operation.
     * @callback module:api/UserRestServiceApi~getOrdersForUserUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserOrderResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getOrdersForUser
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.authenticated 
     * @param {String} opts.authorities0Authority 
     * @param {Object.<String, {String: String}>} opts.credentials 
     * @param {Object.<String, {String: String}>} opts.details 
     * @param {Object.<String, {String: String}>} opts.principal 
     * @param {module:api/UserRestServiceApi~getOrdersForUserUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserOrderResponse>}
     */
    this.getOrdersForUserUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'authenticated': opts['authenticated'],
        'authorities[0].authority': opts['authorities0Authority'],
        'credentials': opts['credentials'],
        'details': opts['details'],
        'principal': opts['principal'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [UserOrderResponse];

      return this.apiClient.callApi(
        '/v1/user/orders', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserUsingGET operation.
     * @callback module:api/UserRestServiceApi~getUserUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getUser
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.authenticated 
     * @param {String} opts.authorities0Authority 
     * @param {Object.<String, {String: String}>} opts.credentials 
     * @param {Object.<String, {String: String}>} opts.details 
     * @param {Object.<String, {String: String}>} opts.principal 
     * @param {module:api/UserRestServiceApi~getUserUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResource}
     */
    this.getUserUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'authenticated': opts['authenticated'],
        'authorities[0].authority': opts['authorities0Authority'],
        'credentials': opts['credentials'],
        'details': opts['details'],
        'principal': opts['principal'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserResource;

      return this.apiClient.callApi(
        '/v1/user', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUserUsingGET operation.
     * @callback module:api/UserRestServiceApi~searchUserUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * searchUser
     * @param {String} phoneNumber phoneNumber
     * @param {module:api/UserRestServiceApi~searchUserUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResource}
     */
    this.searchUserUsingGET = function(phoneNumber, callback) {
      var postBody = null;

      // verify the required parameter 'phoneNumber' is set
      if (phoneNumber === undefined || phoneNumber === null) {
        throw new Error("Missing the required parameter 'phoneNumber' when calling searchUserUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'phoneNumber': phoneNumber,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserResource;

      return this.apiClient.callApi(
        '/v1/user/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOwnUserUsingPUT operation.
     * @callback module:api/UserRestServiceApi~updateOwnUserUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateOwnUser
     * @param {module:model/UpdateUserDto} updateUserDto updateUserDto
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.authenticated 
     * @param {String} opts.authorities0Authority 
     * @param {Object.<String, {String: String}>} opts.credentials 
     * @param {Object.<String, {String: String}>} opts.details 
     * @param {Object.<String, {String: String}>} opts.principal 
     * @param {module:api/UserRestServiceApi~updateOwnUserUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResource}
     */
    this.updateOwnUserUsingPUT = function(updateUserDto, opts, callback) {
      opts = opts || {};
      var postBody = updateUserDto;

      // verify the required parameter 'updateUserDto' is set
      if (updateUserDto === undefined || updateUserDto === null) {
        throw new Error("Missing the required parameter 'updateUserDto' when calling updateOwnUserUsingPUT");
      }


      var pathParams = {
      };
      var queryParams = {
        'authenticated': opts['authenticated'],
        'authorities[0].authority': opts['authorities0Authority'],
        'credentials': opts['credentials'],
        'details': opts['details'],
        'principal': opts['principal'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserResource;

      return this.apiClient.callApi(
        '/v1/user', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
