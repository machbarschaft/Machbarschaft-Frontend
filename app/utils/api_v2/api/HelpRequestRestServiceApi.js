/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateHelpRequestDto', 'model/HelpRequestResource', 'model/UpdateHelpRequestContentDto', 'model/UpdateHelpRequestStatusDto'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateHelpRequestDto'), require('../model/HelpRequestResource'), require('../model/UpdateHelpRequestContentDto'), require('../model/UpdateHelpRequestStatusDto'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiDocumentation) {
      root.ApiDocumentation = {};
    }
    root.ApiDocumentation.HelpRequestRestServiceApi = factory(root.ApiDocumentation.ApiClient, root.ApiDocumentation.CreateHelpRequestDto, root.ApiDocumentation.HelpRequestResource, root.ApiDocumentation.UpdateHelpRequestContentDto, root.ApiDocumentation.UpdateHelpRequestStatusDto);
  }
}(this, function(ApiClient, CreateHelpRequestDto, HelpRequestResource, UpdateHelpRequestContentDto, UpdateHelpRequestStatusDto) {
  'use strict';

  /**
   * HelpRequestRestService service.
   * @module api/HelpRequestRestServiceApi
   * @version 1.0
   */

  /**
   * Constructs a new HelpRequestRestServiceApi. 
   * @alias module:api/HelpRequestRestServiceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createHelpRequestUsingPOST operation.
     * @callback module:api/HelpRequestRestServiceApi~createHelpRequestUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HelpRequestResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createHelpRequest
     * @param {module:model/CreateHelpRequestDto} helpRequest helpRequest
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.authenticated 
     * @param {String} opts.authorities0Authority 
     * @param {Object.<String, {String: String}>} opts.credentials 
     * @param {Object.<String, {String: String}>} opts.details 
     * @param {Object.<String, {String: String}>} opts.principal 
     * @param {module:api/HelpRequestRestServiceApi~createHelpRequestUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HelpRequestResource}
     */
    this.createHelpRequestUsingPOST = function(helpRequest, opts, callback) {
      opts = opts || {};
      var postBody = helpRequest;

      // verify the required parameter 'helpRequest' is set
      if (helpRequest === undefined || helpRequest === null) {
        throw new Error("Missing the required parameter 'helpRequest' when calling createHelpRequestUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'authenticated': opts['authenticated'],
        'authorities[0].authority': opts['authorities0Authority'],
        'credentials': opts['credentials'],
        'details': opts['details'],
        'principal': opts['principal'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = HelpRequestResource;

      return this.apiClient.callApi(
        '/v1/help-request', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHelpRequestListUsingGET operation.
     * @callback module:api/HelpRequestRestServiceApi~getHelpRequestListUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HelpRequestResource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getHelpRequestList
     * @param {module:api/HelpRequestRestServiceApi~getHelpRequestListUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/HelpRequestResource>}
     */
    this.getHelpRequestListUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [HelpRequestResource];

      return this.apiClient.callApi(
        '/v1/help-request', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHelpRequestUsingGET operation.
     * @callback module:api/HelpRequestRestServiceApi~getHelpRequestUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HelpRequestResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getHelpRequest
     * @param {String} uuid uuid
     * @param {module:api/HelpRequestRestServiceApi~getHelpRequestUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HelpRequestResource}
     */
    this.getHelpRequestUsingGET = function(uuid, callback) {
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getHelpRequestUsingGET");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = HelpRequestResource;

      return this.apiClient.callApi(
        '/v1/help-request/{uuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHelpRequestContentUsingPUT operation.
     * @callback module:api/HelpRequestRestServiceApi~updateHelpRequestContentUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HelpRequestResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateHelpRequestContent
     * @param {module:model/UpdateHelpRequestContentDto} updateHelpRequestDto updateHelpRequestDto
     * @param {String} uuid uuid
     * @param {module:api/HelpRequestRestServiceApi~updateHelpRequestContentUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HelpRequestResource}
     */
    this.updateHelpRequestContentUsingPUT = function(updateHelpRequestDto, uuid, callback) {
      var postBody = updateHelpRequestDto;

      // verify the required parameter 'updateHelpRequestDto' is set
      if (updateHelpRequestDto === undefined || updateHelpRequestDto === null) {
        throw new Error("Missing the required parameter 'updateHelpRequestDto' when calling updateHelpRequestContentUsingPUT");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling updateHelpRequestContentUsingPUT");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = HelpRequestResource;

      return this.apiClient.callApi(
        '/v1/help-request/{uuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHelpRequestStatusUsingPUT operation.
     * @callback module:api/HelpRequestRestServiceApi~updateHelpRequestStatusUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HelpRequestResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateHelpRequestStatus
     * @param {module:model/UpdateHelpRequestStatusDto} updateHelpRequestStatusDto updateHelpRequestStatusDto
     * @param {String} uuid uuid
     * @param {module:api/HelpRequestRestServiceApi~updateHelpRequestStatusUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HelpRequestResource}
     */
    this.updateHelpRequestStatusUsingPUT = function(updateHelpRequestStatusDto, uuid, callback) {
      var postBody = updateHelpRequestStatusDto;

      // verify the required parameter 'updateHelpRequestStatusDto' is set
      if (updateHelpRequestStatusDto === undefined || updateHelpRequestStatusDto === null) {
        throw new Error("Missing the required parameter 'updateHelpRequestStatusDto' when calling updateHelpRequestStatusUsingPUT");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling updateHelpRequestStatusUsingPUT");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = HelpRequestResource;

      return this.apiClient.callApi(
        '/v1/help-request/{uuid}/status', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
